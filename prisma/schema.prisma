generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Anime models

model Anime {
  id       Int         @id @default(autoincrement())
  title    String      @unique
  episodes Int?
  runtime  Int // Minutes
  type     AnimeType
  year     Int
  season   Season
  rating   Int? // 1-10
  progress Int?
  status   AnimeStatus

  studios     AnimeStudio[]
  finishDates AnimeFinishDate[]
}

model AnimeStudio {
  id   Int    @id @default(autoincrement())
  name String @unique

  Anime Anime[]

  @@index([name])
}

model AnimeFinishDate {
  id   Int      @id @default(autoincrement())
  date DateTime @default(now())

  Anime   Anime? @relation(fields: [animeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  animeId Int?

  // Non-unique foreign key
  @@index([animeId])
}

enum AnimeType {
  movie
  ona
  ova
  tv
}

enum AnimeStatus {
  watching
  rewatching
  completed
  on_hold
  dropped
  plan_to_watch
}

// Gaki models

model GakiEpisode {
  id     Int      @id @default(autoincrement())
  number Int?
  date   DateTime

  text   GakiEpisodeTitle[]
  series GakiSeries[]
}

model GakiSeries {
  id Int @id @default(autoincrement())

  text     GakiSeriesName[]
  episodes GakiEpisode[]
}

model GakiEpisodeTitle {
  id       Int      @id @default(autoincrement())
  title    String
  language Language

  Episode   GakiEpisode @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodeId Int

  // Non-unique foreign key
  @@index([episodeId])
  // Index for searching by title
  @@index([title])
  // Covering index for fetching by language
  @@index([language, title])
}

model GakiSeriesName {
  id           Int      @id @default(autoincrement())
  name         String
  abbreviation String
  language     Language

  Series   GakiSeries @relation(fields: [seriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seriesId Int

  // Non-unique foreign key
  @@index([seriesId])
  // Covering index for search by language
  @@index([language, name, abbreviation])
}

// Universal models

enum Language {
  en
  ja
}

enum Season {
  winter
  spring
  summer
  fall
}
